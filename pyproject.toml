[tool.poetry]
name = "readability-classifier-predict"
version = "0.1.0"
description = ""
authors = ["LuKrO2011 <lukas.krodinger@gmail.com>"]
readme = "README.adoc"
packages = [{ include = "readability_classifier", from = "src" }]

[tool.poetry.dependencies]
python = "~3.11"
# For newer versions, version solving fails
tensorflow-io-gcs-filesystem = { version = "0.31.0" }
scikit-learn = "^1.3.0"
datasets = "^2.14.5"
pygments = "^2.16.1"
imgkit = "^1.2.3"
opencv-python = "^4.8.1.78"
torch = "^2.0.1"
torchaudio = "^2.0.2"
torchvision = "^0.15.2"
#torch = [{ url = "https://download.pytorch.org/whl/cu118/torch-2.0.1%2Bcu118-cp311-cp311-win_amd64.whl", markers = "platform_system == 'Windows'" },
#  { url = "https://download.pytorch.org/whl/cu118/torch-2.0.1%2Bcu118-cp311-cp311-linux_x86_64.whl", markers = "platform_system == 'Linux'" }]
#torchaudio = [{ url = "https://download.pytorch.org/whl/cu118/torchaudio-2.0.2%2Bcu118-cp311-cp311-win_amd64.whl", markers = "platform_system == 'Windows'" },
#  { url = "https://download.pytorch.org/whl/cu118/torchaudio-2.0.2%2Bcu118-cp311-cp311-linux_x86_64.whl", markers = "platform_system == 'Linux'" }]
#torchvision = [{ url = "https://download.pytorch.org/whl/cu118/torchvision-0.15.2%2Bcu118-cp311-cp311-win_amd64.whl", markers = "platform_system == 'Windows'" },
#  { url = "https://download.pytorch.org/whl/cu118/torchvision-0.15.2%2Bcu118-cp311-cp311-linux_x86_64.whl", markers = "platform_system == 'Linux'" }]
keras = "~2.15"
tensorflow = "^2.15.0" # One also has to run "pip install tensorflow"
transformers = "^4.35.2"



[tool.poetry.group.dev.dependencies]
black = "^22.12.0"
isort = { version = "^5.12.0", extras = ["pyproject"] }
mypy = "^0.991"
pre-commit = "^3.0.0"
pylint = "^2.15.10"
pyupgrade = "^3.3.1"
ruff = "^0.0.235"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-sugar = "^0.9.6"


[tool.black]
line-length = 88
target_version = ["py311"]
include = '\.pyi?$'


[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
indent = "    "


[tool.mypy]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "project_template.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.pytest.ini_options]
pythonpath = ["src"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.coverage.run]
branch = true
source = ["src/project_template", "tests"]
omit = ["tests/fixtures/*"]


[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]


[tool.coverage.html]
directory = "cov_html"


[tool.ruff]
line-length = 88
select = ["B", "C", "E", "F", "W", "C4", "C90", "ISC", "PD", "PLE", "PT", "RET", "SIM", "TID", "UP"]
ignore = []
show-source = true
exclude = [
  "docs",
  ".venv",
  "venv",
  ".mypy_cache",
  ".pytest_cache"
]
target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 10


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
